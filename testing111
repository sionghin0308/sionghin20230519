class WebSocketServer:
    def __init__(self, bind_address='localhost', port=8765, user='user', password='password'):
        self.bind_address = bind_address
        self.port = port
        self.user = user
        self.password = password

    async def process_request(self, path, request_headers):
        if 'Authorization' not in request_headers:
            response_headers = [('WWW-Authenticate', 'Basic realm="WebSocket Authentication"')]
            raise websockets.InvalidHandshake('Unauthorized', status_code=401, response_headers=response_headers)
        else:
            auth_header = request_headers['Authorization']
            auth_parts = auth_header.split(' ')
            auth_type = auth_parts[0]
            if auth_type == 'Basic':
                auth_credentials = base64.b64decode(auth_parts[1]).decode('utf-8')
                auth_user, auth_password = auth_credentials.split(':')
                if auth_user == self.user and auth_password == self.password:
                    return
                else:
                    response_headers = [('WWW-Authenticate', 'Basic realm="WebSocket Authentication"')]
                    raise websockets.InvalidHandshake('Unauthorized', status_code=401, response_headers=response_headers)
            else:
                raise websockets.InvalidHandshake('Bad Request', status_code=400)

    async def handle_websocket(self, websocket, path):
        async for message in websocket:
            print(message)

if __name__ == '__main__':
    server = WebSocketServer(user='myuser', password='mypassword')

    start_server = websockets.serve(server.handle_websocket, server.bind_address, server.port, process_request=server.process_request)

    asyncio.get_event_loop().run_until_complete(start_server)
    asyncio.get_event_loop().run_forever()
