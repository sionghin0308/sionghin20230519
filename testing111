hostname = "example.com"
port = 443

cert_path = "path/to/cert.pem"
truststore_path = "path/to/truststore.jks"
truststore_password = "password"

# Create SSL context for a WebSocket connection
ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
ssl_context.load_cert_chain(certfile=cert_path, password=truststore_password)
ssl_context.load_verify_locations(cafile=truststore_path, password=truststore_password)

# Create WebSocket connection with SSL context
url = f"wss://{hostname}:{port}/websocket"
ws = websocket.WebSocketApp(url, on_message=on_message, on_error=on_error, on_close=on_close)
ws.on_open = on_open
ws.run_forever(sslopt={"cert_reqs": ssl.CERT_REQUIRED, "ssl_context": ssl_context})





import ssl
import socket

hostname = 'example.com'
port = 443

# Create a connection to the website
with socket.create_connection((hostname, port)) as sock:
    # Wrap the socket in an SSL socket
    with ssl.create_default_context().wrap_socket(sock, server_hostname=hostname) as sslsock:
        # Get the server's SSL certificate chain
        cert_chain = sslsock.getpeercert(chain=True)

# Print the path to the certificate file
print(cert_chain[0][1])
